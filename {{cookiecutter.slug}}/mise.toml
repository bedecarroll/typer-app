min_version = '2024.11.1'

[tools]
pre-commit = "latest"
ruff = "latest"
typos = "latest"
uv = "latest"
watchexec = "latest"

[settings]
python.uv_venv_auto = true

[tasks.pkg-install]
description = "Install package as a tool"
run = ["uv tool install '{{ cookiecutter.slug }}@.'"]

[tasks.lint]
description = "Run linters"
run = ["typos --diff", "ruff check"]

[tasks.lint-fix]
description = "Run linters"
run = ["typos -w", "ruff check --fix"]

[tasks.test]
description = "Run unit tests"
run = [
  "uv run coverage run -m pytest -vv",
  "uv run coverage report -m --include=src/**,tests/**",
]

[tasks.dep-bump]
description = "Update dependencies versions"
run = ["uv lock -U"]

[tasks.ver-bump]
description = "Bump semver in pyproject.toml"
usage = """
arg "<type>" default="patch"
"""
run = '''
#!/usr/bin/env bash
set -euo pipefail

file="pyproject.toml"
bump="{{ "{{" }}arg(name="type"){{ "}}" }}"

# Extract current version
version_line=$(grep -E '^version\s*=' "$file")
version=$(echo "$version_line" | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/')
IFS='.' read -r major minor patch <<< "$version"

# Bump the requested component
case "$bump" in
  major)
    major=$((major + 1))
    minor=0
    patch=0
    ;;
  minor)
    minor=$((minor + 1))
    patch=0
    ;;
  patch)
    patch=$((patch + 1))
    ;;
  *)
    echo "Usage: $0 [major|minor|patch]"
    exit 1
    ;;
esac

new_version="${major}.${minor}.${patch}"

# Create a temp file and safely replace the version line
tmpfile=$(mktemp)
while IFS= read -r line; do
  if echo "$line" | grep -qE '^version\s*='; then
    echo "version = \"$new_version\"" >> "$tmpfile"
  else
    echo "$line" >> "$tmpfile"
  fi
done < "$file"

mv "$tmpfile" "$file"

echo "Version bumped to $new_version"
'''
